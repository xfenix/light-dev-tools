{"version":3,"sources":["misc/Generic.styles.js","misc/Settings.js","components/generic/TextBlockBefore.js","components/generic/Button.js","components/generic/Textarea.js","components/app/Base64.js","components/app/Color.js","components/app/Emoji2Hex.js","components/app/Emoji.js","components/generic/RadioGroup.js","components/app/Hash.js","components/app/Urlencode.js","App.js","index.js"],"names":["ApplicationGlobalStyles","createGlobalStyle","InnerTextBlock","styled","div","Header","h4","TextBlockBefore","props","className","children","InnerButton","button","small","transparent","Button","TextareaMainWrapper","TextareaInnerWrapper","form","TextareaTag","textarea","medium","smallest","LabelTag","label","ClipboardButtonWrap","ResetButtonWrap","ResetLink","a","Textarea","autoClose","closeOnClick","hasClipboardButton","style","opacity","value","defaultValue","onClick","event","currentFinalValue","copy","toast","preventDefault","compactClipboardButton","notHasResetButton","readOnly","onChange","Object","create","target","href","Base64Component","useState","inputValue","setInput","outputValue","setOutput","isInputGood","setInputStatusIsGood","newValue","newOutputValue","Base64","encode","decode","error","DefaultTextareaStyle","height","AllControlsWrap","InputsBox","PickersBox","ColorComponent","currentColor","setCurrentColor","onChangeColor","colorObject","hex","rgb","r","g","b","color","FlexWrap","OneFlexColumn","Emoji2HexComponent","currentEmojiHexCode","setCurrentEmojiCode","convertEmojiPartToCode","oneEmoji","comp","length","charCodeAt","native","onSelect","emojiObject","emojiNative","outputBuffer","letter","emojiCode","isNaN","push","toString","join","convertEmojiToHex","title","fontSize","OverrideStylesForTextarea","EmojiComponent","currentEmojiFieldValue","setCurrentEmoji","AllRadios","OneRadioLabel","InputRadio","input","RadioGroup","titleValues","map","hashTitle","hashIndex","key","type","name","groupKey","defaultChecked","AVAIL_HASHES","HashComponent","currentHash","setCurrentHash","Hashes","UrlencodeComponent","encodeURI","decodeURI","App","to","activeClassName","role","aria-label","repo","colorBackground","colorOctocat","path","Date","getFullYear","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3c77eb99.chunk.js","sourcesContent":["import \"react-toastify/dist/ReactToastify.css\";\n\nimport * as settings from \"./Settings\";\n\nimport { createGlobalStyle } from \"styled-components\";\n\n// Our palette https://coolors.co/b80c09-0b4f6c-01baef-fbfbff-040f16\n\nexport const ApplicationGlobalStyles = createGlobalStyle`\nbody {\n  font-family: 'Varta', sans-serif;\n  background: ${settings.WHITE_COLOR};\n  color: #040F16;\n}\n\na {\n  color: ${settings.LIGHT_BLUE_COLOR};\n  text-decoration: none;\n  border-bottom: 1px solid ${settings.LIGHT_BLUE_COLOR};\n}\n\na:hover {\n  border-bottom-color: #056fe8;\n}\n\nh1 {\n  font-size: 24px;\n  color: #040F16;\n}\n\nh2 {\n  font-size: 22px;\n  margin-bottom: 20px;\n}\n\n.fork-me-on-github {\n  border-bottom: none;\n}\n\n.typo p + p {\n  margin-top: 20px;\n}\n\n.typo ul {\n  margin-top: 10px;\n}\n\n.typo ul li {\n  margin-left: 0;\n  padding-left: 20px;\n  list-style-type: none;\n  position: relative;\n}\n\n.typo ul li + li {\n  margin-top: 7px;\n}\n\n.typo ul li:before {\n  left: 0;\n  top: 0;\n  position: absolute;\n  display: inline-block;\n  content: '\\\\2014';\n}\n\n.errorfield {\n  border-color: ${settings.RED_COLOR};\n}\n\n.fontsmall {\n  font-size: 80%;\n}\n\n.mainlayout__wrap {\n  width: 100%;\n  max-width: 740px;\n  margin: 0 auto;\n  padding: 25px 20px;\n  box-sizing: border-box;\n}\n\n.mainlayout__menu {\n  background: #BDEBFB;\n}\n\n.mainlayout__footer {\n  color: ${settings.LIGHT_GREY_COLOR};\n  border-top: 1px solid ${settings.LIGHT_GREY_COLOR};\n  font-size: 90%;\n}\n\n.mainlayout__footgithub {\n  margin-bottom: 5px;\n  display: flex;\n  align-items: center;\n}\n\n.sitetitle {\n  display: inline-block;\n  border-bottom: none;\n}\n\n.sitetitle:hover {\n  opacity: 0.7;\n}\n\n.sitetitle__title {\n  font-size: 44px;\n}\n\n.topmenu {\n  margin-left: -30px;\n  margin-bottom: -20px;\n  overflow: hidden;\n}\n\n.topmenu__item {\n  font-size: 120%;\n  display: inline-block;\n  padding-bottom: 3px;\n  margin-left: 30px;\n  margin-bottom: 20px;\n}\n\n.topmenu__item_active,\n.topmenu__item:hover {\n  color: ${settings.BLACK_COLOR};\n  border-bottom-color: ${settings.BLACK_COLOR};\n}\n\n.emoji-mart-emoji {\n  outline: none;\n}\n`;\n","export const BLACK_COLOR = \"#040F16\";\nexport const RED_COLOR = \"#B80C09\";\nexport const WHITE_COLOR = \"#FBFBFF\";\nexport const LIGHT_BLUE_COLOR = \"#01BAEF\";\nexport const LIGHT_GREY_COLOR = \"#DDDEE2\";\nexport const LIGHT_GREEN_COLOR = \"#bcd8b7\";\nexport const BORDER_RADIUS = \"7px\";\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst InnerTextBlock = styled.div`\n  margin-bottom: 30px;\n`;\n\nconst Header = styled.h4`\n  font-size: 18px;\n  font-weight: bold;\n  margin-bottom: 10px;\n`;\n\nexport default function TextBlockBefore(props) {\n  return (\n    <InnerTextBlock className=\"typo\">\n      <Header>Description</Header>\n      {props.children}\n    </InnerTextBlock>\n  );\n}\n","import * as settings from \"../../misc/Settings\";\n\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nconst InnerButton = styled.button`\n  border-radius: ${settings.BORDER_RADIUS};\n  padding: 10px 20px;\n  margin: 0;\n  cursor: pointer;\n  box-sizing: border-box;\n  background: #bcd8b7;\n  color: #fff;\n  text-transform: uppercase;\n  border: none;\n  outline: none;\n  ${(props) => (props.small ? \"font-size: 70%;\" : \"\")}\n  ${(props) => (props.transparent ? \"opacity: 0.6;\" : \"\")}\n\n  &:hover {\n    ${(props) => (props.transparent ? \"opacity: 1;\" : \"\")};\n  }\n`;\n\nexport default function Button(props) {\n  return <InnerButton {...props}>{props.children}</InnerButton>;\n}\n","import * as settings from \"../../misc/Settings\";\n\nimport { ToastContainer, toast } from \"react-toastify\";\n\nimport Button from \"./Button\";\nimport React from \"react\";\nimport copy from \"copy-to-clipboard\";\nimport styled from \"styled-components\";\n\nconst TextareaMainWrapper = styled.div`\n  box-sizing: border-box;\n  width: 100%;\n`;\nconst TextareaInnerWrapper = styled.form`\n  position: relative;\n  height: 100%;\n  width: 100%;\n`;\nconst TextareaTag = styled.textarea`\n  display: block;\n  box-sizing: border-box;\n  width: 100%;\n  height: 100%;\n  min-height: ${(props) =>\n    props.medium\n      ? \"200px\"\n      : props.small\n      ? \"100px\"\n      : props.smallest\n      ? \"30px\"\n      : \"auto\"};\n  border-radius: ${settings.BORDER_RADIUS};\n  border: 2px solid ${settings.BLACK_COLOR};\n  padding: 10px;\n  resize: vertical;\n  outline: none;\n`;\nconst LabelTag = styled.label`\n  margin-bottom: 5px;\n  display: block;\n`;\nconst ClipboardButtonWrap = styled.div`\n  position: absolute;\n  top: 2px;\n  right: 2px;\n  transition: opacity 0.5s;\n`;\nconst ResetButtonWrap = styled.div`\n  width: 100%;\n  text-align: right;\n  margin-top: 5px;\n`;\nconst ResetLink = styled.a`\n  border-bottom: 1px dashed ${settings.LIGHT_BLUE_COLOR};\n  display: inline-block;\n  font-size: 90%;\n\n  &:hover {\n    color: ${settings.RED_COLOR};\n    border-bottom-color: ${settings.RED_COLOR};\n  }\n`;\n\nexport default function Textarea(props) {\n  const onClipboardButtonClick = (event) => {\n    const currentFinalValue = props.value ? props.value : props.defaultValue;\n    if (currentFinalValue) {\n      copy(currentFinalValue);\n      toast(\"Copied!\");\n    }\n    event.preventDefault();\n  };\n\n  const onResetForm = (event) => {\n    // Dont forget to update event fields in case of any interface change\n    if (props.onChange) {\n      props.onChange(\n        Object.create({\n          target: {\n            value: \"\",\n          },\n        })\n      );\n    }\n    event.preventDefault();\n  };\n\n  return (\n    <TextareaMainWrapper>\n      <ToastContainer autoClose={1000} closeOnClick />\n      {props.label ? <LabelTag>{props.label}:</LabelTag> : \"\"}\n      <TextareaInnerWrapper>\n        <TextareaTag {...props}></TextareaTag>\n        {props.hasClipboardButton ? (\n          <ClipboardButtonWrap\n            style={{ opacity: props.value || props.defaultValue ? 1 : 0 }}\n          >\n            <Button onClick={onClipboardButtonClick} transparent small>\n              {props.compactClipboardButton ? \"Copy\" : \"Copy to clibpoard\"}\n            </Button>\n          </ClipboardButtonWrap>\n        ) : (\n          \"\"\n        )}\n        {props.notHasResetButton ? (\n          \"\"\n        ) : props.readOnly ? (\n          \"\"\n        ) : (\n          <ResetButtonWrap>\n            <ResetLink onClick={onResetForm} href=\"#\">\n              Clear all field data\n            </ResetLink>\n          </ResetButtonWrap>\n        )}\n      </TextareaInnerWrapper>\n    </TextareaMainWrapper>\n  );\n}\n","import React, { useState } from \"react\";\n\nimport { Base64 } from \"js-base64\";\nimport TextBlock from \"../generic/TextBlockBefore\";\nimport Textarea from \"../generic/Textarea\";\n\nexport default function Base64Component() {\n  const [inputValue, setInput] = useState(\"\");\n  const [outputValue, setOutput] = useState(\"\");\n  const [isInputGood, setInputStatusIsGood] = useState(true);\n\n  const setNewInputValue = (event) => {\n    const newValue = event.target.value;\n    if (newValue !== inputValue) {\n      const newOutputValue = Base64.encode(newValue);\n      setInput(newValue);\n      setOutput(newOutputValue);\n      setInputStatusIsGood(true);\n    }\n  };\n\n  const setNewOutputValue = (event) => {\n    const newValue = event.target.value;\n    if (newValue !== outputValue) {\n      setOutput(newValue);\n      try {\n        setInput(Base64.decode(newValue));\n        setInputStatusIsGood(true);\n      } catch (error) {\n        setInput(\n          `Cant decode to plain text, seems base64 payload is broken.\\n\\nWe got following error: [${error}]`\n        );\n        setInputStatusIsGood(false);\n      }\n    }\n  };\n\n  return (\n    <>\n      <TextBlock>\n        <p>Usage scenarios:</p>\n        <ul>\n          <li>Place plain text in first input and get base64 from second</li>\n          <li>\n            Or place base64 encoded payload in second and get text in first\n          </li>\n        </ul>\n      </TextBlock>\n      <Textarea\n        label=\"Plain text\"\n        onChange={setNewInputValue}\n        value={inputValue}\n        className={isInputGood ? \"\" : \"errorfield\"}\n        hasClipboardButton\n        medium\n      ></Textarea>\n      <Textarea\n        label=\"Base64\"\n        onChange={setNewOutputValue}\n        value={outputValue}\n        hasClipboardButton\n        medium\n      ></Textarea>\n    </>\n  );\n}\n","import \"emoji-mart/css/emoji-mart.css\";\n\nimport { ChromePicker, SwatchesPicker } from \"react-color\";\nimport React, { useState } from \"react\";\n\nimport TextBlock from \"../generic/TextBlockBefore\";\nimport Textarea from \"../generic/Textarea\";\nimport styled from \"styled-components\";\n\nconst DefaultTextareaStyle = { height: \"60px\" };\nconst AllControlsWrap = styled.div`\n  @media (max-width: 450px) {\n    display: flex;\n    flex-flow: column-reverse;\n  }\n`;\nconst InputsBox = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-gap: 30px;\n  margin-bottom: 20px;\n\n  @media (max-width: 450px) {\n    display: flex;\n    flex-flow: column;\n    margin-bottom: 0;\n\n    & > div {\n      margin-bottom: 10px;\n    }\n  }\n`;\nconst PickersBox = styled.div`\n  display: flex;\n\n  & > div {\n    margin-right: 30px;\n  }\n\n  @media (max-width: 450px) {\n    flex-flow: column;\n    padding-bottom: 10px;\n\n    & > div {\n      margin-bottom: 30px;\n    }\n  }\n`;\n\nexport default function ColorComponent() {\n  const [currentColor, setCurrentColor] = useState({});\n\n  const onChangeColor = (colorObject) => {\n    setCurrentColor(colorObject);\n  };\n\n  return (\n    <>\n      <TextBlock>\n        <p>\n          Click on any emoji, it will appear in textarea. Then you can copy it\n          in the clipboard.\n        </p>\n      </TextBlock>\n      <AllControlsWrap>\n        <InputsBox>\n          <Textarea\n            label=\"Hex\"\n            style={DefaultTextareaStyle}\n            notHasResetButton\n            hasClipboardButton\n            compactClipboardButton\n            readOnly\n            value={currentColor.hex}\n          />\n          <Textarea\n            label=\"RGBA\"\n            style={DefaultTextareaStyle}\n            notHasResetButton\n            hasClipboardButton\n            compactClipboardButton\n            readOnly\n            value={\n              currentColor.rgb\n                ? `rgba(${currentColor.rgb.r}, ${currentColor.rgb.g}, ${currentColor.rgb.b}, ${currentColor.rgb.a})`\n                : \"\"\n            }\n          />\n          <Textarea\n            label=\"RGB\"\n            style={DefaultTextareaStyle}\n            notHasResetButton\n            hasClipboardButton\n            compactClipboardButton\n            readOnly\n            value={\n              currentColor.rgb\n                ? `rgb(${currentColor.rgb.r}, ${currentColor.rgb.g}, ${currentColor.rgb.b})`\n                : \"\"\n            }\n          />\n        </InputsBox>\n        <PickersBox>\n          <ChromePicker\n            color={currentColor ? currentColor.rgb : \"\"}\n            onChange={onChangeColor}\n          />\n          <SwatchesPicker\n            color={currentColor ? currentColor.rgb : \"\"}\n            onChange={onChangeColor}\n          />\n        </PickersBox>\n      </AllControlsWrap>\n    </>\n  );\n}\n","import \"emoji-mart/css/emoji-mart.css\";\n\nimport React, { useState } from \"react\";\n\nimport { Picker } from \"emoji-mart\";\nimport TextBlock from \"../generic/TextBlockBefore\";\nimport Textarea from \"../generic/Textarea\";\nimport styled from \"styled-components\";\n\nconst FlexWrap = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 30px;\n\n  @media (max-width: 650px) {\n    grid-gap: 0;\n    display: flex;\n    flex-direction: column-reverse;\n  }\n`;\nconst OneFlexColumn = styled.div`\n  @media (max-width: 650px) {\n    &:first-child {\n      margin-top: 20px;\n    }\n  }\n`;\n\nexport default function Emoji2HexComponent() {\n  const [currentEmojiHexCode, setCurrentEmojiCode] = useState(\"\");\n\n  const convertEmojiPartToCode = (oneEmoji) => {\n    let comp;\n    if (oneEmoji.length === 1) {\n      comp = oneEmoji.charCodeAt(0);\n    }\n    comp =\n      (oneEmoji.charCodeAt(0) - 0xd800) * 0x400 +\n      (oneEmoji.charCodeAt(1) - 0xdc00) +\n      0x10000;\n    if (comp < 0) {\n      comp = oneEmoji.charCodeAt(0);\n    }\n    return comp;\n  };\n\n  const convertEmojiToHex = (emojiNative) => {\n    let outputBuffer = [];\n    for (let letter of emojiNative) {\n      let emojiCode = convertEmojiPartToCode(letter);\n      if (isNaN(emojiCode)) {\n        emojiCode = letter.charCodeAt(0);\n      }\n      outputBuffer.push(`&#x${emojiCode.toString(16)};`);\n    }\n    return outputBuffer.join(\"\");\n  };\n\n  const onChangeCurrentEmoji = (emojiObject) => {\n    setCurrentEmojiCode(convertEmojiToHex(emojiObject.native));\n  };\n\n  return (\n    <>\n      <TextBlock>\n        <p>Click on any emoji and get html compatible codes for it.</p>\n      </TextBlock>\n      <FlexWrap>\n        <OneFlexColumn>\n          <Picker\n            native={true}\n            onSelect={onChangeCurrentEmoji}\n            title=\"Pick emoji\"\n          />\n        </OneFlexColumn>\n        <OneFlexColumn>\n          <Textarea\n            label=\"HEX\"\n            defaultValue={currentEmojiHexCode}\n            style={{ fontSize: \"35px\" }}\n            medium\n            hasClipboardButton\n            readOnly\n          ></Textarea>\n        </OneFlexColumn>\n      </FlexWrap>\n    </>\n  );\n}\n","import \"emoji-mart/css/emoji-mart.css\";\n\nimport React, { useState } from \"react\";\nimport styled, { createGlobalStyle } from \"styled-components\";\n\nimport { Picker } from \"emoji-mart\";\nimport TextBlock from \"../generic/TextBlockBefore\";\nimport Textarea from \"../generic/Textarea\";\n\nconst FlexWrap = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 30px;\n\n  @media (max-width: 768px) {\n    grid-gap: 0;\n    display: flex;\n    flex-direction: column-reverse;\n  }\n`;\nconst OneFlexColumn = styled.div`\n  @media (max-width: 768px) {\n    &:first-child {\n      margin-top: 10px;\n    }\n  }\n`;\nconst OverrideStylesForTextarea = createGlobalStyle`\n.emoji-special-textarea {\n  font-size: 40px;\n  height: 405px;\n\n  @media (max-width: 768px) {\n    height: 70px !important;\n  }\n}\n`;\n\nexport default function EmojiComponent() {\n  const [currentEmojiFieldValue, setCurrentEmoji] = useState(\"\");\n\n  const addEmoji = (emojiObject) => {\n    setCurrentEmoji(currentEmojiFieldValue + emojiObject.native);\n  };\n\n  const onChangeCurrentEmoji = (event) => {\n    setCurrentEmoji(event.target.value);\n  };\n\n  return (\n    <>\n      <OverrideStylesForTextarea />\n      <TextBlock>\n        <p>\n          Click on any emoji, it will appear in textarea. Then you can copy it\n          in the clipboard.\n        </p>\n      </TextBlock>\n      <FlexWrap>\n        <OneFlexColumn>\n          <Picker native={true} onSelect={addEmoji} title=\"Pick emoji\" />\n        </OneFlexColumn>\n        <OneFlexColumn>\n          <Textarea\n            label=\"Result\"\n            value={currentEmojiFieldValue}\n            onChange={onChangeCurrentEmoji}\n            hasClipboardButton\n            className=\"emoji-special-textarea\"\n          ></Textarea>\n        </OneFlexColumn>\n      </FlexWrap>\n    </>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst AllRadios = styled.div`\n  margin-bottom: -20px;\n  padding-bottom: 30px;\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst OneRadioLabel = styled.label`\n  display: flex;\n  align-items: flex-start;\n  margin-right: 20px;\n  margin-bottom: 20px;\n`;\n\nconst InputRadio = styled.input`\n  margin: 0 5px 0 0;\n  padding: 0;\n  display: block;\n`;\n\nexport default function RadioGroup(props) {\n  return (\n    <AllRadios>\n      {props.titleValues.map((hashTitle, hashIndex) => {\n        return (\n          <OneRadioLabel key={hashIndex}>\n            <InputRadio\n              type=\"radio\"\n              name={props.groupKey}\n              onChange={props.onChange ? props.onChange : () => {}}\n              value={hashTitle}\n              {...(hashIndex === 0 ? { defaultChecked: true } : {})}\n            />\n            <div>{hashTitle}</div>\n          </OneRadioLabel>\n        );\n      })}\n    </AllRadios>\n  );\n}\n","import React, { useState } from \"react\";\n\nimport Hashes from \"jshashes\";\nimport RadioGroup from \"../generic/RadioGroup\";\nimport TextBlock from \"../generic/TextBlockBefore\";\nimport Textarea from \"../generic/Textarea\";\n\nconst AVAIL_HASHES = [\"MD5\", \"SHA1\", \"SHA256\", \"SHA512\"];\n\nexport default function HashComponent() {\n  const [currentHash, setCurrentHash] = useState(AVAIL_HASHES[0]);\n  const [inputValue, setInput] = useState(\"\");\n  const [outputValue, setOutput] = useState(\"\");\n\n  const onHashInput = (event) => {\n    const newValue = event.target.value;\n    if (newValue !== inputValue) {\n      setInput(newValue);\n      setOutput(new Hashes[currentHash]().hex(newValue));\n    }\n  };\n\n  const onHashSelect = (event) => {\n    setCurrentHash(event.target.value);\n    setOutput(new Hashes[event.target.value]().hex(inputValue));\n  };\n\n  return (\n    <>\n      <TextBlock>\n        <p>Select hash type, provide input and get the hex digest.</p>\n      </TextBlock>\n      <RadioGroup\n        titleValues={AVAIL_HASHES}\n        onChange={onHashSelect}\n        groupKey=\"hashfn\"\n      />\n      <Textarea\n        label=\"Input\"\n        onChange={onHashInput}\n        value={inputValue}\n        small\n      ></Textarea>\n      <Textarea\n        label=\"Hash digest\"\n        defaultValue={outputValue}\n        hasClipboardButton\n        smallest\n        readOnly\n      ></Textarea>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\n\nimport TextBlock from \"../generic/TextBlockBefore\";\nimport Textarea from \"../generic/Textarea\";\n\nexport default function UrlencodeComponent() {\n  const [inputValue, setInput] = useState(\"\");\n  const [outputValue, setOutput] = useState(\"\");\n  const [isInputGood, setInputStatusIsGood] = useState(true);\n\n  const setNewInputValue = (event) => {\n    const newValue = event.target.value;\n    if (newValue !== inputValue) {\n      setInput(newValue);\n      setOutput(encodeURI(newValue));\n      setInputStatusIsGood(true);\n    }\n  };\n\n  const setNewOutputValue = (event) => {\n    const newValue = event.target.value;\n    if (newValue !== outputValue) {\n      try {\n        setOutput(newValue);\n        setInput(decodeURI(newValue));\n        setInputStatusIsGood(true);\n      } catch (error) {\n        setInput(\n          `Cant decode to plain text, seems base64 payload is broken.\\n\\nWe got following error: [${error}]`\n        );\n        setInputStatusIsGood(false);\n      }\n    }\n  };\n\n  return (\n    <>\n      <TextBlock>\n        <p>Just helper for url encoding & decoding.</p>\n      </TextBlock>\n      <Textarea\n        label=\"Url to encode\"\n        value={inputValue}\n        className={isInputGood ? \"\" : \"errorfield\"}\n        onChange={setNewInputValue}\n        hasClipboardButton\n        small\n      ></Textarea>\n      <Textarea\n        label=\"Url to decode\"\n        value={outputValue}\n        onChange={setNewOutputValue}\n        hasClipboardButton\n        small\n      ></Textarea>\n    </>\n  );\n}\n","import \"react-toastify/dist/ReactToastify.css\";\n\nimport { NavLink, Route, HashRouter as Router, Switch } from \"react-router-dom\";\n\nimport { ApplicationGlobalStyles } from \"./misc/Generic.styles\";\nimport Base64Component from \"./components/app/Base64\";\nimport ColorComponent from \"./components/app/Color\";\nimport Emoji2HexComponent from \"./components/app/Emoji2Hex\";\nimport EmojiComponent from \"./components/app/Emoji\";\nimport ForkMeOnGithub from \"fork-me-on-github\";\nimport GitHubButton from \"react-github-btn\";\nimport HashComponent from \"./components/app/Hash\";\nimport React from \"react\";\nimport { Reset } from \"styled-reset\";\nimport UrlencodeComponent from \"./components/app/Urlencode\";\n\n// Our palette https://coolors.co/b80c09-0b4f6c-01baef-fbfbff-040f16\n\nfunction App() {\n  return (\n    <>\n      <Router>\n        <Reset />\n        <ApplicationGlobalStyles />\n        <main className=\"mainlayout\">\n          <header className=\"mainlayout__topline mainlayout__wrap\">\n            <NavLink to=\"/\" className=\"sitetitle\" activeClassName=\"\">\n              <h1 className=\"sitetitle__title\">\n                <span role=\"img\" aria-label=\"Software engineer\">\n                  &#x1F9D1;&#x200D;&#x1F4BB;\n                </span>\n                &nbsp;Light dev tools\n              </h1>\n            </NavLink>\n            <ForkMeOnGithub\n              repo=\"https://github.com/xfenix/light-dev-tools\"\n              colorBackground=\"black\"\n              colorOctocat=\"white\"\n            />\n          </header>\n          <div className=\"mainlayout__menu\">\n            <nav className=\"mainlayout__wrap\">\n              <div className=\"topmenu\">\n                <NavLink\n                  to=\"/tool/base64/\"\n                  className=\"topmenu__item\"\n                  activeClassName=\"topmenu__item_active\"\n                >\n                  Base 64\n                </NavLink>\n                <NavLink\n                  to=\"/tool/hash/\"\n                  className=\"topmenu__item\"\n                  activeClassName=\"topmenu__item_active\"\n                >\n                  Hash\n                </NavLink>\n                <NavLink\n                  to=\"/tool/urlencode/\"\n                  className=\"topmenu__item\"\n                  activeClassName=\"topmenu__item_active\"\n                >\n                  Url encode&decode\n                </NavLink>\n                <NavLink\n                  to=\"/tool/emoji/\"\n                  className=\"topmenu__item\"\n                  activeClassName=\"topmenu__item_active\"\n                >\n                  Emoji picker\n                </NavLink>\n                <NavLink\n                  to=\"/tool/emoji2hex/\"\n                  className=\"topmenu__item\"\n                  activeClassName=\"topmenu__item_active\"\n                >\n                  Emoji2hex\n                </NavLink>\n                <NavLink\n                  to=\"/tool/color/\"\n                  className=\"topmenu__item\"\n                  activeClassName=\"topmenu__item_active\"\n                >\n                  Color picker\n                </NavLink>\n              </div>\n            </nav>\n          </div>\n          <div className=\"mainlayout__wrap mainlayout__content\">\n            <Switch>\n              <Route path=\"/tool/base64/\">\n                <Base64Component />\n              </Route>\n              <Route path=\"/tool/hash/\">\n                <HashComponent />\n              </Route>\n              <Route path=\"/tool/urlencode/\">\n                <UrlencodeComponent />\n              </Route>\n              <Route path=\"/tool/emoji/\">\n                <EmojiComponent />\n              </Route>\n              <Route path=\"/tool/emoji2hex/\">\n                <Emoji2HexComponent />\n              </Route>\n              <Route path=\"/tool/color/\">\n                <ColorComponent />\n              </Route>\n              <Route path=\"/\">\n                <div className=\"typo\">\n                  <h2>Hello</h2>\n                  <p>\n                    Dear developer, this site contains bunch of useful and\n                    simple tools.\n                  </p>\n                  <p>Use them for the greater good!</p>\n                </div>\n              </Route>\n            </Switch>\n          </div>\n          <footer className=\"mainlayout__wrap mainlayout__footer typo\">\n            <div className=\"mainlayout__footgithub\">\n              <GitHubButton href=\"https://github.com/xfenix\">\n                Developed by @xfenix\n              </GitHubButton>\n            </div>\n            <p>\n              {new Date().getFullYear()} &copy; By big and strong corporation.\n              Special thanks for mom. Also for cat. And many other useless text\n              parts.\n            </p>\n          </footer>\n        </main>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}